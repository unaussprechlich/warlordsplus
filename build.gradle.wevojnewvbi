buildscript {

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://repo.spongepowered.org/maven' }
    }

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "1.3.50"
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.1-SNAPSHOT'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.6-SNAPSHOT'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}

// Languages
apply plugin: 'java'
apply plugin: 'kotlin'

// IDE
apply plugin: 'idea'

// Minecraft
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

// Jar packaging
apply plugin: 'com.github.johnrengelman.shadow'

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}


buildscript {

    repositories {
        mavenCentral()
        jcenter()
        maven { url = uri("http://files.minecraftforge.net/maven") }
        maven {
            setUrl("http://repo.spongepowered.org/maven")
        }
        maven {
            setUrl("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50")
        classpath("org.spongepowered:mixingradle:0.6-SNAPSHOT")
        classpath("com.github.jengelman.gradle.plugins:shadow:2.0.4")
        classpath("net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT") {
            exclude(group = "net.sf.trove4j", module = "trove4j")
            exclude(group = "trove", module = "trove")
        }
    }
}

apply(plugin = "net.minecraftforge.gradle.forge")
apply(plugin = "kotlin")
apply(plugin = "org.spongepowered.mixin")

apply{
    plugin<ShadowPlugin>()
}

plugins {
    kotlin("jvm") version "1.3.50"
    kotlin("plugin.serialization") version "1.3.50"
    java
    idea
}

val sourceSets = the<JavaPluginConvention>().sourceSets
val mainSourceSet = sourceSets.getByName("main")
val minecraft = the<ForgeExtension>()

configure<IdeaModel> {
    module.apply {
        inheritOutputDirs = true
    }
    module.isDownloadJavadoc = true
    module.isDownloadSources = true
}

configure<JavaPluginConvention> {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configure<MixinExtension> {
    defaultObfuscationEnv = "notch"
}

version = modVersion
group = "net.unaussprechlich.warlordsplus"


configure<ForgeExtension> {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"

    replace("@VERSION@", modVersion)
    /*

    val args = listOf(
        "-Dmixin.env.compatLevel=JAVA_8", //needed to use java 8 when using mixins
        "-Dmixin.debug.verbose=true", //verbose mixin output for easier debugging of mixins
        "-Dmixin.debug.export=true", //export classes from mixin to runDirectory/.mixin.out
        "-XX:-OmitStackTraceInFastThrow", //without this sometimes you end up with exception with empty stacktrace
        "-XX:-DisableExplicitGC"  // fast world loading
    )

    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)*/
}

val compile by configurations
val embed by configurations.creating
compile.extendsFrom(embed)

repositories {
    jcenter()
    mavenCentral()
    "http://dl.bintray.com/kotlin".let {
        maven { setUrl("$it/ktor") }
        maven { setUrl("$it/kotlinx") }
    }
    maven {
        setUrl("http://repo.spongepowered.org/maven")
    }
}

dependencies {
    embed(kotlin("stdlib-jdk8"))
    embed(kotlin("reflect"))
    embed("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")

    embed(ktor("client-cio"))

    embed(ktor("client-serialization-jvm")) {
        exclude(group = "org.jetbrains.kotlin")
    }

    embed("org.spongepowered:mixin:0.7.11-SNAPSHOT"){
        isTransitive = false
    }

    testImplementation(kotlin("test"))
    testImplementation(kotlin("test-junit"))

}

val sourceJar: Jar by tasks
val shadowJar: ShadowJar by tasks
val build by tasks
val jar by tasks

fun configureManifest(manifest: Manifest) {
    manifest.attributes["TweakClass"] = "org.spongepowered.asm.launch.MixinTweaker"
    manifest.attributes["MixinConfigs"] = "mixin.config.json"
    manifest.attributes["FMLCorePluginContainsFMLMod"] = "true" // workaround for mixin double-loading the mod on new forge versions
}

fun configureShadowJar(task: ShadowJar, classifier: String) {
    task.configurations = listOf(embed)
    task.exclude("META-INF/MUMFREY*")
    task.from(sourceSets["main"].output)
    task.from(sourceSets["api"].output)
    task.from("$buildDir/tmp/compileJava/")
    task.classifier = classifier
}

shadowJar.apply { configureShadowJar(this, "shadow") }

build.dependsOn(shadowJar)

val reobf : DeobfuscateJar by tasks

reobf{

}

tasks {
    withType<DeobfuscateJar>{

    }

    withType<KotlinCompile> {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.includeRuntime = true
    }

    withType<ProcessResources> {
        inputs.property("version", project.version)
        inputs.property("mcversion", minecraft.version)

        // replace stuff in mcmod.info, nothing else
        from(mainSourceSet.resources.srcDirs) {
            include("mcmod.info")

            // replace version and mcversion
            expand(mapOf("version" to project.version, "mcversion" to minecraft.version))
        }

        // copy everything else, thats not the mcmod.info
        from(mainSourceSet.resources.srcDirs) {
            exclude("mcmod.info")
        }
    }

    withType<Jar> {
        //from("$buildDir/tmp/compileJava/")
        from(sourceSets["main"].output)
        from(sourceSets["api"].output)

        exclude("LICENSE.txt", "log4j2.xml")

        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

        configureManifest(manifest)
    }
}


artifacts{
    add("archives", shadowJar)
    add("archives", jar)
}
